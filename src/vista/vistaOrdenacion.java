/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import MetodosOrdenacion.Metodos;
import controlador.controladorCancion;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import modelo.Cancion;

/**
 *
 * @author sebastian
 */
public class vistaOrdenacion extends javax.swing.JFrame {

    /**
     * Creates new form vistaOrdenacion
     */
    public static controladorCancion ctlCancion = new controladorCancion();
    Metodos claseMetodos;
    Cancion arrayCanciones[];
    Cancion[] arregloOrdenado;
    Cancion cancion;
    List<Cancion> canciones;

    public vistaOrdenacion() {
        initComponents();
        claseMetodos = new Metodos();
        cancion = new Cancion();
        canciones = ctlCancion.ListarCancion("Cancion");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbMetodo = new javax.swing.JComboBox<>();
        cbCampo = new javax.swing.JComboBox<>();
        cbCantidadRegistro = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDesordenados = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblOrdenada = new javax.swing.JTable();
        btnOrdenar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("METODOS DE ORDENACION");

        jLabel2.setText("Metodo");

        jLabel3.setText("Campo");

        jLabel4.setText("Cantidad de registros");

        cbMetodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un metodo", "burbuja", "burbuja bidireccional", "insert sort", "seleccion", "quick sort", "shell", "merge sort", "monticulos", "peine" }));
        cbMetodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMetodoActionPerformed(evt);
            }
        });

        cbCampo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un campo", "duracion", "fecha", "nombre" }));

        cbCantidadRegistro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una cantidad", "100", "1.000", "10.000", "100.000", "500.000", "1'000.000" }));

        tblDesordenados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID_CANCION", "NOMBRE", "DURACION", "FECHA_LANZAMIENTO"
            }
        ));
        jScrollPane2.setViewportView(tblDesordenados);

        jLabel5.setText("Registros desordenados");

        jLabel6.setText("Registros ordenados");

        tblOrdenada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID_CANCION", "NOMBRE", "DURACION", "FECHA_LANZAMIENTO"
            }
        ));
        jScrollPane3.setViewportView(tblOrdenada);

        btnOrdenar.setText("Ordenar Registros");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addContainerGap(37, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbMetodo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCampo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCantidadRegistro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(173, 173, 173))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(btnOrdenar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(cbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbCantidadRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(btnOrdenar)
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbMetodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMetodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMetodoActionPerformed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed
        int metodos = cbMetodo.getSelectedIndex();
        int campo = cbCampo.getSelectedIndex();
        int cantidad = cbCantidadRegistro.getSelectedIndex();

        String can = cbCantidadRegistro.getSelectedItem() + "";
        String met = cbMetodo.getSelectedItem() + "";
        String tipo = cbCantidadRegistro.getSelectedItem() + "";

        if (metodos == 1) {
            if (campo == 1) {
                ordenarBurbujaIntDura(metodos, campo, cantidad);
                claseMetodos.GuardarTiempos(met, can, tipo);
            } else if (campo == 2) {
                ordenarBurbujaDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarBurbujaString(metodos, campo, cantidad);
            }
        }
        if (metodos == 2) {
            if (campo == 1) {
                ordenarBurbujaBidiIntDura(metodos, campo, cantidad);

            } else if (campo == 2) {
                ordenarBurbujaBidiDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarBurbujaBidiString(metodos, campo, cantidad);
            }
        }
        if (metodos == 3) {
            if (campo == 1) {
                ordenarInserSortIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenarInsertSOrtDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarInsertSortString(metodos, campo, cantidad);
            }
        }
        if (metodos == 4) {
            if (campo == 1) {
                ordenarSeleccionIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenaSeleccionDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenaSeleccionString(metodos, campo, cantidad);
            }

        }
        if (metodos == 5) {
            if (campo == 1) {
                ordenarQuickSortIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenaQuickSortDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarQuickSortString(metodos, campo, cantidad);
            }
        }
        if (metodos == 6) {
            if (campo == 1) {
                ordenarShellIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenarShellDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarShellString(metodos, campo, cantidad);
            }
        }
        if (metodos == 7) {
            if (campo == 1) {
                ordenaMergeSortIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenarMergeSortDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarMergeSortString(metodos, campo, cantidad);
            }
        }
        if (metodos == 8) {
            if (campo == 1) {
                ordenarMonticulosIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenarMonticulosDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarMonticulosString(metodos, campo, cantidad);
            }
        }
        if (metodos == 9) {
            if (campo == 1) {
                ordenarPeineIntDura(metodos, campo, cantidad);
            } else if (campo == 2) {
                ordenarPeineDate(metodos, campo, cantidad);
            } else if (campo == 3) {
                ordenarPeineString(metodos, campo, cantidad);
            }
        }
    }//GEN-LAST:event_btnOrdenarActionPerformed

    public void listarDesorden() {
        SimpleDateFormat parseador = new SimpleDateFormat("dd/MM/yy");
        String fecha;
        DefaultTableModel modelo = new DefaultTableModel();
        String nombreColumnas[] = {"ID_CANCION", "NOMBRE", "DURACION", "FECHA_LANZAMIENTO"};
        modelo = new DefaultTableModel(new Object[][]{}, nombreColumnas);
        for (int i = 0; i < arrayCanciones.length; i++) {
            fecha = parseador.format(arrayCanciones[i].getFechaNacimiento());
            modelo.addRow(new Object[]{
                arrayCanciones[i].getIdCancion(),
                arrayCanciones[i].getNombre(),
                arrayCanciones[i].getDuracion(),
                fecha});
        }
        tblDesordenados.setModel(modelo);
    }

    public void listarOrdenado() {
        SimpleDateFormat parseador = new SimpleDateFormat("dd/MM/yy");
        String fecha;
        DefaultTableModel modelo = new DefaultTableModel();
        String nombreColumnas[] = {"ID_CANCION", "NOMBRE", "DURACION", "FECHA_LANZAMIENTO"};
        modelo = new DefaultTableModel(new Object[][]{}, nombreColumnas);
        for (int i = 0; i < arregloOrdenado.length; i++) {
            fecha = parseador.format(arrayCanciones[i].getFechaNacimiento());
            modelo.addRow(new Object[]{
                arregloOrdenado[i].getIdCancion(),
                arregloOrdenado[i].getNombre(),
                arregloOrdenado[i].getDuracion(),
                fecha});
        }
        tblOrdenada.setModel(modelo);
    }

    public void ordenarBurbujaIntDura(int metodos, int campo, int cantidad) {
        //List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    public void ordenarBurbujaDate(int metodos, int campo, int cantidad) {
        //List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 2) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaDate(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    public void ordenarBurbujaString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 3) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaString(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaOrdenacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaOrdenacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaOrdenacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaOrdenacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vistaOrdenacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JComboBox<String> cbCampo;
    private javax.swing.JComboBox<String> cbCantidadRegistro;
    private javax.swing.JComboBox<String> cbMetodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblDesordenados;
    private javax.swing.JTable tblOrdenada;
    // End of variables declaration//GEN-END:variables

    private void ordenarBurbujaBidiIntDura(int metodos, int campo, int cantidad) {
        //List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarBurbujaBidiDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarBurbujaBidiString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarInserSortIntDura(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarInsertSOrtDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarInsertSortString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarSeleccionIntDura(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenaSeleccionDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenaSeleccionString(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarQuickSortIntDura(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenaQuickSortDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarQuickSortString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarShellIntDura(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarShellDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarShellString(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenaMergeSortIntDura(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarMergeSortDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarMergeSortString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarMonticulosIntDura(int metodos, int campo, int cantidad) {
        //  List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarMonticulosDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarMonticulosString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarPeineIntDura(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarPeineDate(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }

    private void ordenarPeineString(int metodos, int campo, int cantidad) {
        // List<Cancion> canciones = ctlCancion.ListarCancion("Cancion");
        if (metodos == 1) {
            if (campo == 1) {
                if (cantidad == 1) {
                    arrayCanciones = new Cancion[100];
                    for (int i = 0; i < 100; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 2) {
                    arrayCanciones = new Cancion[1000];
                    for (int i = 0; i < 1000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 3) {
                    arrayCanciones = new Cancion[10000];
                    for (int i = 0; i < 10000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 4) {
                    arrayCanciones = new Cancion[100000];
                    for (int i = 0; i < 100000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else if (cantidad == 5) {
                    arrayCanciones = new Cancion[500000];
                    for (int i = 0; i < 500000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                } else {
                    arrayCanciones = new Cancion[1000000];
                    for (int i = 0; i < 1000000; i++) {
                        arrayCanciones[i] = canciones.get(i);
                    }
                }
                listarDesorden();
                arregloOrdenado = claseMetodos.OrdenarBurbujaInt(arrayCanciones);
                listarOrdenado();
            }
        }
    }
}
